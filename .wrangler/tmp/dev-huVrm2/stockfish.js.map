{
  "version": 3,
  "sources": ["../bundle-ml4F2J/checked-fetch.js", "../bundle-ml4F2J/strip-cf-connecting-ip-header.js", "../../../functions/api/stockfish.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-ml4F2J/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-ml4F2J/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/wables/lawb2/.wrangler/tmp/dev-huVrm2",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// Cloudflare Worker for Stockfish Chess API\n// Advanced chess engine for World-Class AI difficulty\n\n// Opening theory database\nconst OPENING_MOVES = {\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w': ['e2e4', 'd2d4', 'c2c4', 'g1f3', 'b1c3'],\n  'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b': ['e7e5', 'c7c5', 'e7e6', 'd7d5', 'g8f6'],\n  'rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b': ['d7d5', 'g8f6', 'e7e6', 'c7c5', 'g7g6'],\n  'rnbqkbnr/pppppppp/8/8/2P5/8/PP1PPPPP/RNBQKBNR b': ['e7e5', 'd7d5', 'g8f6', 'e7e6', 'g7g6']\n};\n\n// Piece-square tables for positional evaluation\nconst PIECE_SQUARE_TABLES = {\n  'P': [ // White pawns\n    [0,  0,  0,  0,  0,  0,  0,  0],\n    [50, 50, 50, 50, 50, 50, 50, 50],\n    [10, 10, 20, 30, 30, 20, 10, 10],\n    [5,  5, 10, 25, 25, 10,  5,  5],\n    [0,  0,  0, 20, 20,  0,  0,  0],\n    [5, -5,-10,  0,  0,-10, -5,  5],\n    [5, 10, 10,-20,-20, 10, 10,  5],\n    [0,  0,  0,  0,  0,  0,  0,  0]\n  ],\n  'N': [ // Knights\n    [-50,-40,-30,-30,-30,-30,-40,-50],\n    [-40,-20,  0,  0,  0,  0,-20,-40],\n    [-30,  0, 10, 15, 15, 10,  0,-30],\n    [-30,  5, 15, 20, 20, 15,  5,-30],\n    [-30,  0, 15, 20, 20, 15,  0,-30],\n    [-30,  5, 10, 15, 15, 10,  5,-30],\n    [-40,-20,  0,  5,  5,  0,-20,-40],\n    [-50,-40,-30,-30,-30,-30,-40,-50]\n  ],\n  'B': [ // Bishops\n    [-20,-10,-10,-10,-10,-10,-10,-20],\n    [-10,  0,  0,  0,  0,  0,  0,-10],\n    [-10,  0,  5, 10, 10,  5,  0,-10],\n    [-10,  5,  5, 10, 10,  5,  5,-10],\n    [-10,  0, 10, 10, 10, 10,  0,-10],\n    [-10, 10, 10, 10, 10, 10, 10,-10],\n    [-10,  5,  0,  0,  0,  0,  5,-10],\n    [-20,-10,-10,-10,-10,-10,-10,-20]\n  ],\n  'R': [ // Rooks\n    [0,  0,  0,  0,  0,  0,  0,  0],\n    [5, 10, 10, 10, 10, 10, 10,  5],\n    [-5,  0,  0,  0,  0,  0,  0, -5],\n    [-5,  0,  0,  0,  0,  0,  0, -5],\n    [-5,  0,  0,  0,  0,  0,  0, -5],\n    [-5,  0,  0,  0,  0,  0,  0, -5],\n    [-5,  0,  0,  0,  0,  0,  0, -5],\n    [0,  0,  0,  5,  5,  0,  0,  0]\n  ],\n  'Q': [ // Queens\n    [-20,-10,-10, -5, -5,-10,-10,-20],\n    [-10,  0,  0,  0,  0,  0,  0,-10],\n    [-10,  0,  5,  5,  5,  5,  0,-10],\n    [-5,  0,  5,  5,  5,  5,  0, -5],\n    [0,  0,  5,  5,  5,  5,  0, -5],\n    [-10,  5,  5,  5,  5,  5,  0,-10],\n    [-10,  0,  5,  0,  0,  0,  0,-10],\n    [-20,-10,-10, -5, -5,-10,-10,-20]\n  ],\n  'K': [ // Kings\n    [-30,-40,-40,-50,-50,-40,-40,-30],\n    [-30,-40,-40,-50,-50,-40,-40,-30],\n    [-30,-40,-40,-50,-50,-40,-40,-30],\n    [-30,-40,-40,-50,-50,-40,-40,-30],\n    [-20,-30,-30,-40,-40,-30,-30,-20],\n    [-10,-20,-20,-20,-20,-20,-20,-10],\n    [20, 20,  0,  0,  0,  0, 20, 20],\n    [20, 30, 10,  0,  0, 10, 30, 20]\n  ]\n};\n\nclass AdvancedChessEngine {\n  constructor() {\n    this.board = this.initializeBoard();\n    this.currentPlayer = 'white';\n    this.moveHistory = [];\n    this.transpositionTable = new Map();\n  }\n\n  initializeBoard() {\n    const board = Array(8).fill(null).map(() => Array(8).fill(null));\n    \n    const initialSetup = {\n      0: ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n      1: ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n      6: ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n      7: ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n    };\n    \n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (initialSetup[row]) {\n          board[row][col] = initialSetup[row][col];\n        }\n      }\n    }\n    \n    return board;\n  }\n\n  setPositionFromFEN(fen) {\n    const parts = fen.split(' ');\n    const position = parts[0];\n    const rows = position.split('/');\n    \n    this.board = Array(8).fill(null).map(() => Array(8).fill(null));\n    \n    for (let row = 0; row < 8; row++) {\n      let col = 0;\n      for (let char of rows[row]) {\n        if (char >= '1' && char <= '8') {\n          col += parseInt(char);\n        } else {\n          this.board[row][col] = char;\n          col++;\n        }\n      }\n    }\n    \n    if (parts.length > 1) {\n      this.currentPlayer = parts[1] === 'w' ? 'white' : 'black';\n    }\n  }\n\n  findBestMove(movetime = 1200) {\n    // Check opening theory first\n    const fenKey = this.boardToFEN().split(' ')[0] + ' ' + this.currentPlayer[0];\n    if (OPENING_MOVES[fenKey]) {\n      const openingMove = OPENING_MOVES[fenKey][Math.floor(Math.random() * OPENING_MOVES[fenKey].length)];\n      const moveObj = this.notationToMove(openingMove);\n      if (moveObj && this.isLegalMove(moveObj)) {\n        return openingMove;\n      }\n    }\n\n    // Use iterative deepening with time management\n    const legalMoves = this.getLegalMoves();\n    if (legalMoves.length === 0) return null;\n\n    let bestMove = legalMoves[0];\n    const startTime = Date.now();\n    const maxDepth = Math.min(6, Math.floor(movetime / 200)); // Deeper search for world-class\n\n    // Sort moves for better pruning\n    const sortedMoves = this.sortMoves(legalMoves);\n\n    // Iterative deepening\n    for (let depth = 1; depth <= maxDepth; depth++) {\n      if (Date.now() - startTime > movetime * 0.8) break; // Use 80% of time\n\n      let alpha = -Infinity;\n      let beta = Infinity;\n      let currentBestMove = sortedMoves[0];\n      let currentBestScore = -Infinity;\n\n      for (const move of sortedMoves) {\n        this.makeMove(move);\n        const score = -this.negamax(depth - 1, -beta, -alpha, false, startTime, movetime);\n        this.undoMove(move);\n\n        if (score > currentBestScore) {\n          currentBestScore = score;\n          currentBestMove = move;\n        }\n        alpha = Math.max(alpha, score);\n        if (alpha >= beta) break; // Beta cutoff\n      }\n\n      bestMove = currentBestMove;\n    }\n\n    return this.moveToNotation(bestMove);\n  }\n\n  sortMoves(moves) {\n    return moves.sort((a, b) => {\n      // Prioritize captures (MVV-LVA)\n      const aIsCapture = this.board[a.to[0]][a.to[1]] !== null;\n      const bIsCapture = this.board[b.to[0]][b.to[1]] !== null;\n      \n      if (aIsCapture && !bIsCapture) return -1;\n      if (!aIsCapture && bIsCapture) return 1;\n      \n      if (aIsCapture && bIsCapture) {\n        const aValue = this.getPieceValue(this.board[a.to[0]][a.to[1]]);\n        const bValue = this.getPieceValue(this.board[b.to[0]][b.to[1]]);\n        return bValue - aValue; // Higher value captures first\n      }\n      \n      // Prioritize checks\n      this.makeMove(a);\n      const aIsCheck = this.isKingInCheck();\n      this.undoMove(a);\n      \n      this.makeMove(b);\n      const bIsCheck = this.isKingInCheck();\n      this.undoMove(b);\n      \n      if (aIsCheck && !bIsCheck) return -1;\n      if (!aIsCheck && bIsCheck) return 1;\n      \n      return 0;\n    });\n  }\n\n  negamax(depth, alpha, beta, isMaximizing, startTime, movetime) {\n    // Time management\n    if (Date.now() - startTime > movetime * 0.8) {\n      return 0; // Return neutral score if time runs out\n    }\n\n    // Transposition table lookup\n    const hash = this.getPositionHash();\n    if (this.transpositionTable.has(hash)) {\n      const entry = this.transpositionTable.get(hash);\n      if (entry.depth >= depth) {\n        return entry.score;\n      }\n    }\n\n    if (depth === 0) {\n      return this.quiescence(alpha, beta, isMaximizing, startTime, movetime);\n    }\n\n    const legalMoves = this.getLegalMoves();\n    if (legalMoves.length === 0) {\n      if (this.isKingInCheck()) {\n        return -10000; // Checkmate\n      }\n      return 0; // Stalemate\n    }\n\n    const sortedMoves = this.sortMoves(legalMoves);\n    let bestScore = -Infinity;\n\n    for (const move of sortedMoves) {\n      this.makeMove(move);\n      const score = -this.negamax(depth - 1, -beta, -alpha, !isMaximizing, startTime, movetime);\n      this.undoMove(move);\n\n      bestScore = Math.max(bestScore, score);\n      alpha = Math.max(alpha, score);\n      if (alpha >= beta) break; // Beta cutoff\n    }\n\n    // Store in transposition table\n    this.transpositionTable.set(hash, { depth, score: bestScore });\n\n    return bestScore;\n  }\n\n  quiescence(alpha, beta, isMaximizing, startTime, movetime) {\n    // Time management\n    if (Date.now() - startTime > movetime * 0.8) {\n      return 0;\n    }\n\n    const standPat = this.evaluatePosition();\n    if (standPat >= beta) return beta;\n\n    if (alpha < standPat) alpha = standPat;\n\n    const captures = this.getLegalMoves().filter(move => \n      this.board[move.to[0]][move.to[1]] !== null\n    );\n\n    for (const move of captures) {\n      this.makeMove(move);\n      const score = -this.quiescence(-beta, -alpha, !isMaximizing, startTime, movetime);\n      this.undoMove(move);\n\n      if (score >= beta) return beta;\n      if (score > alpha) alpha = score;\n    }\n\n    return alpha;\n  }\n\n  getPositionHash() {\n    // Simple hash for transposition table\n    let hash = 0;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = this.board[row][col];\n        if (piece) {\n          hash = hash * 31 + piece.charCodeAt(0) + row * 8 + col;\n        }\n      }\n    }\n    return hash;\n  }\n\n  evaluatePosition() {\n    let score = 0;\n    \n    // Material and positional evaluation\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = this.board[row][col];\n        if (!piece) continue;\n\n        const isWhite = piece === piece.toUpperCase();\n        const pieceType = piece.toUpperCase();\n        const value = this.getPieceValue(piece);\n        \n        // Material value\n        score += isWhite ? value : -value;\n        \n        // Positional value\n        const table = PIECE_SQUARE_TABLES[pieceType];\n        if (table) {\n          const tableRow = isWhite ? row : 7 - row;\n          const positionalValue = table[tableRow][col];\n          score += isWhite ? positionalValue : -positionalValue;\n        }\n      }\n    }\n\n    // Mobility evaluation\n    const whiteMobility = this.getLegalMovesForPlayer('white').length;\n    const blackMobility = this.getLegalMovesForPlayer('black').length;\n    score += (whiteMobility - blackMobility) * 10;\n\n    // Center control\n    score += this.evaluateCenterControl();\n\n    // King safety\n    score += this.evaluateKingSafety();\n\n    // Pawn structure\n    score += this.evaluatePawnStructure();\n\n    return score;\n  }\n\n  getPieceValue(piece) {\n    const values = { 'P': 100, 'N': 320, 'B': 330, 'R': 500, 'Q': 900, 'K': 20000 };\n    return values[piece.toUpperCase()] || 0;\n  }\n\n  evaluateCenterControl() {\n    let score = 0;\n    const centerSquares = [[3, 3], [3, 4], [4, 3], [4, 4], [2, 3], [2, 4], [5, 3], [5, 4]];\n    \n    for (const [row, col] of centerSquares) {\n      for (let r = 0; r < 8; r++) {\n        for (let c = 0; c < 8; c++) {\n          const piece = this.board[r][c];\n          if (piece && this.canPieceAttack(r, c, row, col)) {\n            const isWhite = piece === piece.toUpperCase();\n            score += isWhite ? 5 : -5;\n          }\n        }\n      }\n    }\n    \n    return score;\n  }\n\n  evaluateKingSafety() {\n    let score = 0;\n    \n    // Find kings\n    const whiteKing = this.findKing('white');\n    const blackKing = this.findKing('black');\n    \n    if (whiteKing) {\n      const [row, col] = whiteKing;\n      // Penalize king in center during middlegame\n      if (row >= 3 && row <= 4 && col >= 3 && col <= 4) {\n        score -= 50;\n      }\n      // Bonus for castled king\n      if (row === 7 && (col === 1 || col === 6)) {\n        score += 30;\n      }\n    }\n    \n    if (blackKing) {\n      const [row, col] = blackKing;\n      if (row >= 3 && row <= 4 && col >= 3 && col <= 4) {\n        score += 50;\n      }\n      if (row === 0 && (col === 1 || col === 6)) {\n        score -= 30;\n      }\n    }\n    \n    return score;\n  }\n\n  evaluatePawnStructure() {\n    let score = 0;\n    \n    // Doubled pawns penalty\n    for (let col = 0; col < 8; col++) {\n      let whitePawns = 0, blackPawns = 0;\n      for (let row = 0; row < 8; row++) {\n        if (this.board[row][col] === 'P') whitePawns++;\n        if (this.board[row][col] === 'p') blackPawns++;\n      }\n      if (whitePawns > 1) score -= 20 * (whitePawns - 1);\n      if (blackPawns > 1) score += 20 * (blackPawns - 1);\n    }\n    \n    return score;\n  }\n\n  canPieceAttack(fromRow, fromCol, toRow, toCol) {\n    const piece = this.board[fromRow][fromCol];\n    if (!piece) return false;\n    \n    const pieceType = piece.toUpperCase();\n    const isWhite = piece === piece.toUpperCase();\n    \n    switch (pieceType) {\n      case 'P': return this.canPawnAttack(fromRow, fromCol, toRow, toCol, isWhite);\n      case 'N': return this.canKnightAttack(fromRow, fromCol, toRow, toCol);\n      case 'B': return this.canBishopAttack(fromRow, fromCol, toRow, toCol);\n      case 'R': return this.canRookAttack(fromRow, fromCol, toRow, toCol);\n      case 'Q': return this.canQueenAttack(fromRow, fromCol, toRow, toCol);\n      case 'K': return this.canKingAttack(fromRow, fromCol, toRow, toCol);\n      default: return false;\n    }\n  }\n\n  canPawnAttack(fromRow, fromCol, toRow, toCol, isWhite) {\n    const direction = isWhite ? -1 : 1;\n    return Math.abs(fromCol - toCol) === 1 && (toRow - fromRow) === direction;\n  }\n\n  canKnightAttack(fromRow, fromCol, toRow, toCol) {\n    const rowDiff = Math.abs(fromRow - toRow);\n    const colDiff = Math.abs(fromCol - toCol);\n    return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\n  }\n\n  canBishopAttack(fromRow, fromCol, toRow, toCol) {\n    if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n    return this.isPathClear(fromRow, fromCol, toRow, toCol);\n  }\n\n  canRookAttack(fromRow, fromCol, toRow, toCol) {\n    if (fromRow !== toRow && fromCol !== toCol) return false;\n    return this.isPathClear(fromRow, fromCol, toRow, toCol);\n  }\n\n  canQueenAttack(fromRow, fromCol, toRow, toCol) {\n    return this.canRookAttack(fromRow, fromCol, toRow, toCol) || \n           this.canBishopAttack(fromRow, fromCol, toRow, toCol);\n  }\n\n  canKingAttack(fromRow, fromCol, toRow, toCol) {\n    return Math.abs(fromRow - toRow) <= 1 && Math.abs(fromCol - toCol) <= 1;\n  }\n\n  isPathClear(fromRow, fromCol, toRow, toCol) {\n    const rowDir = fromRow === toRow ? 0 : (toRow > fromRow ? 1 : -1);\n    const colDir = fromCol === toCol ? 0 : (toCol > fromCol ? 1 : -1);\n    \n    let currentRow = fromRow + rowDir;\n    let currentCol = fromCol + colDir;\n    \n    while (currentRow !== toRow || currentCol !== toCol) {\n      if (this.board[currentRow][currentCol] !== null) return false;\n      currentRow += rowDir;\n      currentCol += colDir;\n    }\n    \n    return true;\n  }\n\n  getLegalMoves() {\n    return this.getLegalMovesForPlayer(this.currentPlayer);\n  }\n\n  getLegalMovesForPlayer(player) {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = this.board[row][col];\n        if (piece && this.isPieceOfPlayer(piece, player)) {\n          const pieceMoves = this.getMovesForPiece(row, col, piece);\n          moves.push(...pieceMoves);\n        }\n      }\n    }\n    return moves;\n  }\n\n  isPieceOfPlayer(piece, player) {\n    const isWhite = piece === piece.toUpperCase();\n    return (player === 'white' && isWhite) || (player === 'black' && !isWhite);\n  }\n\n  getMovesForPiece(row, col, piece) {\n    const pieceType = piece.toUpperCase();\n    const isWhite = piece === piece.toUpperCase();\n    \n    switch (pieceType) {\n      case 'P': return this.getPawnMoves(row, col, isWhite);\n      case 'N': return this.getKnightMoves(row, col);\n      case 'B': return this.getBishopMoves(row, col);\n      case 'R': return this.getRookMoves(row, col);\n      case 'Q': return this.getQueenMoves(row, col);\n      case 'K': return this.getKingMoves(row, col);\n      default: return [];\n    }\n  }\n\n  getPawnMoves(row, col, isWhite) {\n    const moves = [];\n    const direction = isWhite ? -1 : 1;\n    const startRank = isWhite ? 6 : 1;\n    \n    // Forward move\n    const newRow = row + direction;\n    if (this.isValidPosition(newRow, col) && this.board[newRow][col] === null) {\n      if (this.isLegalMove({ from: [row, col], to: [newRow, col] })) {\n        moves.push({ from: [row, col], to: [newRow, col] });\n      }\n      \n      // Initial two-square move\n      if (row === startRank) {\n        const doubleRow = row + 2 * direction;\n        if (this.isValidPosition(doubleRow, col) && this.board[doubleRow][col] === null) {\n          if (this.isLegalMove({ from: [row, col], to: [doubleRow, col] })) {\n            moves.push({ from: [row, col], to: [doubleRow, col] });\n          }\n        }\n      }\n    }\n    \n    // Captures\n    for (const colOffset of [-1, 1]) {\n      const newCol = col + colOffset;\n      if (this.isValidPosition(newRow, newCol)) {\n        const targetPiece = this.board[newRow][newCol];\n        if (targetPiece && this.isPieceOfPlayer(targetPiece, isWhite ? 'black' : 'white')) {\n          if (this.isLegalMove({ from: [row, col], to: [newRow, newCol] })) {\n            moves.push({ from: [row, col], to: [newRow, newCol] });\n          }\n        }\n      }\n    }\n    \n    return moves;\n  }\n\n  getKnightMoves(row, col) {\n    const moves = [];\n    const knightMoves = [\n      [-2, -1], [-2, 1], [-1, -2], [-1, 2],\n      [1, -2], [1, 2], [2, -1], [2, 1]\n    ];\n    \n    for (const [rowOffset, colOffset] of knightMoves) {\n      const newRow = row + rowOffset;\n      const newCol = col + colOffset;\n      \n      if (this.isValidPosition(newRow, newCol)) {\n        const targetPiece = this.board[newRow][newCol];\n        if (!targetPiece || !this.isPieceOfPlayer(targetPiece, this.currentPlayer)) {\n          if (this.isLegalMove({ from: [row, col], to: [newRow, newCol] })) {\n            moves.push({ from: [row, col], to: [newRow, newCol] });\n          }\n        }\n      }\n    }\n    \n    return moves;\n  }\n\n  getBishopMoves(row, col) {\n    return this.getSlidingMoves(row, col, [[-1, -1], [-1, 1], [1, -1], [1, 1]]);\n  }\n\n  getRookMoves(row, col) {\n    return this.getSlidingMoves(row, col, [[-1, 0], [1, 0], [0, -1], [0, 1]]);\n  }\n\n  getQueenMoves(row, col) {\n    return this.getSlidingMoves(row, col, [\n      [-1, -1], [-1, 1], [1, -1], [1, 1],\n      [-1, 0], [1, 0], [0, -1], [0, 1]\n    ]);\n  }\n\n  getKingMoves(row, col) {\n    const moves = [];\n    for (let rowOffset = -1; rowOffset <= 1; rowOffset++) {\n      for (let colOffset = -1; colOffset <= 1; colOffset++) {\n        if (rowOffset === 0 && colOffset === 0) continue;\n        \n        const newRow = row + rowOffset;\n        const newCol = col + colOffset;\n        \n        if (this.isValidPosition(newRow, newCol)) {\n          const targetPiece = this.board[newRow][newCol];\n          if (!targetPiece || !this.isPieceOfPlayer(targetPiece, this.currentPlayer)) {\n            if (this.isLegalMove({ from: [row, col], to: [newRow, newCol] })) {\n              moves.push({ from: [row, col], to: [newRow, newCol] });\n            }\n          }\n        }\n      }\n    }\n    return moves;\n  }\n\n  getSlidingMoves(row, col, directions) {\n    const moves = [];\n    \n    for (const [rowDir, colDir] of directions) {\n      let currentRow = row + rowDir;\n      let currentCol = col + colDir;\n      \n      while (this.isValidPosition(currentRow, currentCol)) {\n        const targetPiece = this.board[currentRow][currentCol];\n        \n        if (targetPiece === null) {\n          if (this.isLegalMove({ from: [row, col], to: [currentRow, currentCol] })) {\n            moves.push({ from: [row, col], to: [currentRow, currentCol] });\n          }\n        } else {\n          if (!this.isPieceOfPlayer(targetPiece, this.currentPlayer)) {\n            if (this.isLegalMove({ from: [row, col], to: [currentRow, currentCol] })) {\n              moves.push({ from: [row, col], to: [currentRow, currentCol] });\n            }\n          }\n          break;\n        }\n        \n        currentRow += rowDir;\n        currentCol += colDir;\n      }\n    }\n    \n    return moves;\n  }\n\n  isValidPosition(row, col) {\n    return row >= 0 && row < 8 && col >= 0 && col < 8;\n  }\n\n  isLegalMove(move) {\n    // Handle string notation\n    if (typeof move === 'string') {\n      const moveObj = this.notationToMove(move);\n      if (!moveObj) return false;\n      move = moveObj;\n    }\n    \n    if (!move || !this.isValidPosition(move.from[0], move.from[1]) || \n        !this.isValidPosition(move.to[0], move.to[1])) {\n      return false;\n    }\n    \n    // Check if piece exists and belongs to current player\n    const piece = this.board[move.from[0]][move.from[1]];\n    if (!piece || !this.isPieceOfPlayer(piece, this.currentPlayer)) {\n      return false;\n    }\n    \n    // Check if target square is not occupied by own piece\n    const targetPiece = this.board[move.to[0]][move.to[1]];\n    if (targetPiece && this.isPieceOfPlayer(targetPiece, this.currentPlayer)) {\n      return false;\n    }\n    \n    // Check if move is valid for the piece type\n    const pieceType = piece.toUpperCase();\n    let isValidMove = false;\n    \n    switch (pieceType) {\n      case 'P': \n        isValidMove = this.isValidPawnMove(move.from[0], move.from[1], move.to[0], move.to[1], piece === piece.toUpperCase());\n        break;\n      case 'N': \n        isValidMove = this.canKnightAttack(move.from[0], move.from[1], move.to[0], move.to[1]);\n        break;\n      case 'B': \n        isValidMove = this.canBishopAttack(move.from[0], move.from[1], move.to[0], move.to[1]);\n        break;\n      case 'R': \n        isValidMove = this.canRookAttack(move.from[0], move.from[1], move.to[0], move.to[1]);\n        break;\n      case 'Q': \n        isValidMove = this.canQueenAttack(move.from[0], move.from[1], move.to[0], move.to[1]);\n        break;\n      case 'K': \n        isValidMove = this.canKingAttack(move.from[0], move.from[1], move.to[0], move.to[1]);\n        break;\n    }\n    \n    if (!isValidMove) return false;\n    \n    // Check if move would leave king in check\n    this.makeMove(move);\n    const isLegal = !this.isKingInCheck();\n    this.undoMove(move);\n    \n    return isLegal;\n  }\n\n  isValidPawnMove(fromRow, fromCol, toRow, toCol, isWhite) {\n    const direction = isWhite ? -1 : 1;\n    const startRank = isWhite ? 6 : 1;\n    \n    // Forward move\n    if (fromCol === toCol && toRow === fromRow + direction && this.board[toRow][toCol] === null) {\n      return true;\n    }\n    \n    // Initial two-square move\n    if (fromCol === toCol && fromRow === startRank && \n        toRow === fromRow + 2 * direction && \n        this.board[fromRow + direction][fromCol] === null && \n        this.board[toRow][toCol] === null) {\n      return true;\n    }\n    \n    // Capture\n    if (Math.abs(fromCol - toCol) === 1 && toRow === fromRow + direction) {\n      return this.board[toRow][toCol] !== null && \n             !this.isPieceOfPlayer(this.board[toRow][toCol], isWhite ? 'white' : 'black');\n    }\n    \n    return false;\n  }\n\n  makeMove(move) {\n    const { from, to } = move;\n    this.board[to[0]][to[1]] = this.board[from[0]][from[1]];\n    this.board[from[0]][from[1]] = null;\n    this.currentPlayer = this.currentPlayer === 'white' ? 'black' : 'white';\n  }\n\n  undoMove(move) {\n    const { from, to } = move;\n    this.board[from[0]][from[1]] = this.board[to[0]][to[1]];\n    this.board[to[0]][to[1]] = null;\n    this.currentPlayer = this.currentPlayer === 'white' ? 'black' : 'white';\n  }\n\n  isKingInCheck() {\n    const kingPos = this.findKing(this.currentPlayer);\n    if (!kingPos) return false;\n    \n    const opponent = this.currentPlayer === 'white' ? 'black' : 'white';\n    return this.isSquareUnderAttack(kingPos[0], kingPos[1], opponent);\n  }\n\n  findKing(player) {\n    const kingPiece = player === 'white' ? 'K' : 'k';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (this.board[row][col] === kingPiece) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  isSquareUnderAttack(row, col, attackingPlayer) {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = this.board[r][c];\n        if (piece && this.isPieceOfPlayer(piece, attackingPlayer)) {\n          if (this.canPieceAttack(r, c, row, col)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  moveToNotation(move) {\n    const files = 'abcdefgh';\n    const ranks = '87654321';\n    \n    const fromFile = files[move.from[1]];\n    const fromRank = ranks[move.from[0]];\n    const toFile = files[move.to[1]];\n    const toRank = ranks[move.to[0]];\n    \n    return fromFile + fromRank + toFile + toRank;\n  }\n\n  notationToMove(notation) {\n    if (notation.length !== 4) return null;\n    \n    const files = 'abcdefgh';\n    const ranks = '87654321';\n    \n    const fromCol = files.indexOf(notation[0]);\n    const fromRow = ranks.indexOf(notation[1]);\n    const toCol = files.indexOf(notation[2]);\n    const toRow = ranks.indexOf(notation[3]);\n    \n    if (fromCol === -1 || fromRow === -1 || toCol === -1 || toRow === -1) return null;\n    \n    return { from: [fromRow, fromCol], to: [toRow, toCol] };\n  }\n\n  boardToFEN() {\n    let fen = '';\n    for (let row = 0; row < 8; row++) {\n      let empty = 0;\n      for (let col = 0; col < 8; col++) {\n        const piece = this.board[row][col];\n        if (!piece) {\n          empty++;\n        } else {\n          if (empty > 0) { fen += empty; empty = 0; }\n          fen += piece;\n        }\n      }\n      if (empty > 0) fen += empty;\n      if (row < 7) fen += '/';\n    }\n    fen += ' ' + (this.currentPlayer === 'white' ? 'w' : 'b');\n    fen += ' - - 0 1';\n    return fen;\n  }\n}\n\nexport default {\n  async fetch(request) {\n    // Handle CORS\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 200,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        },\n      });\n    }\n\n    // Only allow POST requests\n    if (request.method !== 'POST') {\n      return new Response('Method not allowed', { status: 405 });\n    }\n\n    try {\n      const { fen, movetime = 1200 } = await request.json();\n\n      if (!fen) {\n        return new Response(JSON.stringify({ error: 'FEN position required' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        });\n      }\n\n      // Initialize advanced chess engine\n      const engine = new AdvancedChessEngine();\n      engine.setPositionFromFEN(fen);\n      \n      // Find best move with advanced evaluation\n      const bestmove = engine.findBestMove(movetime);\n      \n      if (!bestmove) {\n        return new Response(JSON.stringify({ error: 'No legal moves found' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        });\n      }\n      \n      const response = {\n        bestmove: bestmove,\n        fen: fen,\n        movetime: movetime\n      };\n\n      return new Response(JSON.stringify(response), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n\n    } catch (error) {\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n  },\n}; ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/wables/lawb2/functions/api/stockfish.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/wables/lawb2/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/wables/lawb2/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/wables/lawb2/functions/api/stockfish.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/wables/lawb2/.wrangler/tmp/bundle-ml4F2J/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/wables/lawb2/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/wables/lawb2/.wrangler/tmp/bundle-ml4F2J/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/wables/lawb2/.wrangler/tmp/bundle-ml4F2J/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
